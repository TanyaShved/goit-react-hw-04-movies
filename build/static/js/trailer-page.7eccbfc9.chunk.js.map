{"version":3,"sources":["components/Modal/Modal.module.css","components/Trailer/Trailer.module.css","components/Modal/Modal.jsx","components/Trailer/Trailer.jsx"],"names":["module","exports","Modal","onClose","children","history","useHistory","useEffect","keydownCloseModal","code","goBack","window","addEventListener","removeEventListener","createPortal","className","s","backdrop","onClick","target","currentTarget","content","document","querySelector","Status","Trailer","movieId","toggleModal","showModal","useState","trailer","setTrailer","error","setError","status","setStatus","api","fetchModalForTrailler","then","video","results","length","Promise","reject","Error","catch","Spinner","trailerList","map","id","key","name","trailerItem","title","width","height","src","frameBorder","allowFullScreen","allow","message"],"mappings":"0HACAA,EAAOC,QAAU,CAAC,SAAW,wBAAwB,QAAU,yB,mBCA/DD,EAAOC,QAAU,CAAC,YAAc,6BAA6B,YAAc,+B,wGCmC5DC,MA9Bf,YAAuC,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAClBC,EAAUC,cAgBhB,OAdAC,qBAAU,WACR,IAAMC,EAAoB,SAAC,GAChB,WAD6B,EAAXC,MACNN,IACrBE,EAAQK,UAGV,OADAC,OAAOC,iBAAiB,UAAWJ,GAC5B,kBAAMG,OAAOE,oBAAoB,UAAWL,MAClD,CAACL,EAASE,IAONS,uBACL,qBAAKC,UAAWC,IAAEC,SAAUC,QANH,SAAC,GAA8B,EAA5BC,SAA4B,EAApBC,eACRjB,IAC5BE,EAAQK,UAIR,SACE,qBAAKK,UAAWC,IAAEK,QAAlB,SAA4BjB,MAE9BkB,SAASC,cAAc,iB,yBCpBrBC,EACE,OADFA,EAEK,UAFLA,EAGM,WAHNA,EAIM,WAyEGC,UApEC,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UAAgB,EACzBC,mBAAS,IADgB,mBAChDC,EADgD,KACvCC,EADuC,OAE7BF,mBAAS,MAFoB,mBAEhDG,EAFgD,KAEzCC,EAFyC,OAG3BJ,mBAASL,GAHkB,mBAGhDU,EAHgD,KAGxCC,EAHwC,KAwBvD,OAnBA5B,qBAAU,WACR4B,EAAUX,GAEVY,IACGC,sBAAsBX,GACtBY,MAAK,SAAAC,GACJ,OAA6B,IAAzBA,EAAMC,QAAQC,QAChBV,EAAWQ,EAAMC,cACjBL,EAAUX,IAGLkB,QAAQC,OAAO,IAAIC,MAAJ,oCAEvBC,OAAM,SAAAb,GACLC,EAASD,GACTG,EAAUX,QAEb,CAACE,IAGF,qCACGQ,IAAWV,GAAkB,cAACsB,EAAA,EAAD,IAE7BZ,IAAWV,GACV,mCACGM,GACC,oBAAIf,UAAWC,IAAE+B,YAAjB,SACGjB,EAAQkB,KACP,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,IAAKC,EAAZ,EAAYA,KAAZ,OACED,GACE,oBAAmBnC,UAAWC,IAAEoC,YAAhC,SACGxB,GACC,cAAC,EAAD,CAAOzB,QAASwB,EAAhB,SACE,wBACE0B,MAAOF,EACPG,MAAM,OACNC,OAAO,OACPC,IA5CR,kCA4C2BN,EACnBO,YAAY,IACZC,iBAAe,EACfC,MAAM,+EAVLV,EAAKC,UAsB3BhB,IAAWV,GAAmB,6BAAKQ,EAAM4B","file":"static/js/trailer-page.7eccbfc9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Modal_backdrop__3FAPo\",\"content\":\"Modal_content__1VIbZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"trailerList\":\"Trailer_trailerList__1pFqx\",\"trailerItem\":\"Trailer_trailerItem__1w24t\"};","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\nimport { useHistory } from 'react-router-dom';\nimport s from './Modal.module.css';\n\nfunction Modal({ onClose, children }) {\n  const history = useHistory();\n\n  useEffect(() => {\n    const keydownCloseModal = ({ code }) => {\n      code === 'Escape' && onClose();\n      history.goBack();\n    };\n    window.addEventListener('keydown', keydownCloseModal);\n    return () => window.removeEventListener('keydown', keydownCloseModal);\n  }, [onClose, history]);\n\n  const backdropCloseModal = ({ target, currentTarget }) => {\n    target === currentTarget && onClose();\n    history.goBack();\n  };\n\n  return createPortal(\n    <div className={s.backdrop} onClick={backdropCloseModal}>\n      <div className={s.content}>{children}</div>\n    </div>,\n    document.querySelector('#modal-root'),\n  );\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Modal;\n","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../Spinner/Spinner';\nimport Modal from '../Modal/Modal';\nimport api from 'services/movies-api';\nimport s from './Trailer.module.css';\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nconst YOUTUBE_URL = 'https://www.youtube.com//embed/';\n\nconst Trailer = ({ movieId, toggleModal, showModal }) => {\n  const [trailer, setTrailer] = useState('');\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState(Status.IDLE);\n\n  useEffect(() => {\n    setStatus(Status.PENDING);\n\n    api\n      .fetchModalForTrailler(movieId)\n      .then(video => {\n        if (video.results.length !== 0) {\n          setTrailer(video.results);\n          setStatus(Status.RESOLVED);\n          return;\n        }\n        return Promise.reject(new Error(`Sorry, Something came wrong!`));\n      })\n      .catch(error => {\n        setError(error);\n        setStatus(Status.REJECTED);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      {status === Status.PENDING && <Spinner />}\n\n      {status === Status.RESOLVED && (\n        <>\n          {trailer && (\n            <ul className={s.trailerList}>\n              {trailer.map(\n                ({ id, key, name }) =>\n                  key && (\n                    <li key={id + key} className={s.trailerItem}>\n                      {showModal && (\n                        <Modal onClose={toggleModal}>\n                          <iframe\n                            title={name}\n                            width=\"100%\"\n                            height=\"100%\"\n                            src={YOUTUBE_URL + key}\n                            frameBorder=\"0\"\n                            allowFullScreen\n                            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                          />\n                        </Modal>\n                      )}\n                    </li>\n                  ),\n              )}\n            </ul>\n          )}\n        </>\n      )}\n\n      {status === Status.REJECTED && <h1>{error.message}</h1>}\n    </>\n  );\n};\n\nTrailer.propTypes = {\n  movieId: PropTypes.string.isRequired,\n  toggleModal: PropTypes.func.isRequired,\n  showModal: PropTypes.bool.isRequired,\n};\n\nexport default Trailer;\n"],"sourceRoot":""}