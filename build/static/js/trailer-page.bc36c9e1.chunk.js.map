{"version":3,"sources":["components/Modal/Modal.module.css","components/Trailer/Trailer.module.css","components/Modal/Modal.jsx","components/Trailer/Trailer.jsx"],"names":["module","exports","Modal","onClose","children","useEffect","keydownCloseModal","code","window","addEventListener","removeEventListener","createPortal","className","s","backdrop","onClick","target","currentTarget","content","document","querySelector","Status","Trailer","id","toggleModal","showModal","useState","trailer","setTrailer","error","setError","status","setStatus","api","fetchModalForTrailler","then","video","results","length","Promise","reject","Error","catch","Spinner","trailerList","map","key","name","trailerItem","title","width","height","src","frameBorder","allowFullScreen","allow","message"],"mappings":"0HACAA,EAAOC,QAAU,CAAC,SAAW,wBAAwB,QAAU,yB,mBCA/DD,EAAOC,QAAU,CAAC,YAAc,6BAA6B,YAAc,+B,iGC8B5DC,MA1Bf,YAAuC,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAaxB,OAZAC,qBAAU,WACR,IAAMC,EAAoB,SAAC,GAChB,WAD6B,EAAXC,MACNJ,KAGvB,OADAK,OAAOC,iBAAiB,UAAWH,GAC5B,kBAAME,OAAOE,oBAAoB,UAAWJ,MAClD,CAACH,IAMGQ,uBACL,qBAAKC,UAAWC,IAAEC,SAAUC,QALH,SAAC,GAA8B,EAA5BC,SAA4B,EAApBC,eACRd,KAI5B,SACE,qBAAKS,UAAWC,IAAEK,QAAlB,SAA4Bd,MAE9Be,SAASC,cAAc,iB,yBCfrBC,EACE,OADFA,EAEK,UAFLA,EAGM,WAHNA,EAIM,WAiEGC,UA5DC,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,UAAe,EAClBC,mBAAS,IADS,mBACzCC,EADyC,KAChCC,EADgC,OAEtBF,mBAAS,MAFa,mBAEzCG,EAFyC,KAElCC,EAFkC,OAGpBJ,mBAASL,GAHW,mBAGzCU,EAHyC,KAGjCC,EAHiC,KAwB9C,OAnBF3B,qBAAU,WACR2B,EAAUX,GAEVY,IACEC,sBAAsBX,GACtBY,MAAK,SAAAC,GACH,OAA6B,IAAzBA,EAAMC,QAAQC,QAChBV,EAAWQ,EAAMC,cACjBL,EAAUX,IAGLkB,QAAQC,OAAO,IAAIC,MAAJ,oCAEvBC,OAAM,SAAAb,GACLC,EAASD,GACTG,EAAUX,QAEb,CAACE,IAGF,qCACGQ,IAAWV,GAAkB,cAACsB,EAAA,EAAD,IAE3BZ,IAAWV,GACZ,mCACGM,GAAY,oBAAIf,UAAWC,IAAE+B,YAAjB,SACNjB,EAAQkB,KAAI,gBAAEtB,EAAF,EAAEA,GAAIuB,EAAN,EAAMA,IAAKC,EAAX,EAAWA,KAAX,OACTD,GACK,oBAAiBlC,UAAWC,IAAEmC,YAA9B,SACFvB,GAAc,cAAC,EAAD,CAAOtB,QAASqB,EAAhB,SACT,wBACIyB,MAAOF,EACPG,MAAM,OACNC,OAAO,OACPC,IAzCZ,kCAyC6BN,EACjBO,YAAY,IACZC,iBAAe,EACfC,MAAM,+EATJhC,EAAGuB,UAkB9Bf,IAAWV,GAAmB,6BAAKQ,EAAM2B","file":"static/js/trailer-page.bc36c9e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Modal_backdrop__3FAPo\",\"content\":\"Modal_content__1VIbZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"trailerList\":\"Trailer_trailerList__1pFqx\",\"trailerItem\":\"Trailer_trailerItem__1w24t\"};","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\nimport s from './Modal.module.css';\n\nfunction Modal({ onClose, children }) {\n  useEffect(() => {\n    const keydownCloseModal = ({ code }) => {\n      code === 'Escape' && onClose();\n    };\n    window.addEventListener('keydown', keydownCloseModal);\n    return () => window.removeEventListener('keydown', keydownCloseModal);\n  }, [onClose]);\n\n  const backdropCloseModal = ({ target, currentTarget }) => {\n    target === currentTarget && onClose();\n  };\n\n  return createPortal(\n    <div className={s.backdrop} onClick={backdropCloseModal}>\n      <div className={s.content}>{children}</div>\n    </div>,\n    document.querySelector('#modal-root'),\n  );\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Modal;\n","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../Spinner/Spinner';\nimport Modal from '../Modal/Modal';\nimport api from 'services/movies-api';\nimport s from './Trailer.module.css'\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nconst YOUTUBE_URL = 'https://www.youtube.com//embed/';\n\nconst Trailer = ({id, toggleModal, showModal}) => {\n  const [trailer, setTrailer] = useState('');\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState(Status.IDLE);\n    \n  useEffect(() => {\n    setStatus(Status.PENDING);\n\n    api\n     .fetchModalForTrailler(id)\n     .then(video => {\n        if (video.results.length !== 0) {\n          setTrailer(video.results);\n          setStatus(Status.RESOLVED);\n          return;\n        }\n        return Promise.reject(new Error(`Sorry, Something came wrong!`));\n      })\n      .catch(error => {\n        setError(error);\n        setStatus(Status.REJECTED);\n      });\n  }, [id]);\n    \n    return (\n    <>\n      {status === Status.PENDING && <Spinner />}\n\n        {status === Status.RESOLVED &&\n        <>\n          {trailer && (<ul className={s.trailerList}>\n                {trailer.map(({id, key, name}) =>\n                    key &&\n                        (<li key={id+key} className={s.trailerItem}>\n                      {showModal && (<Modal onClose={toggleModal}>\n                            <iframe\n                                title={name}\n                                width=\"100%\"\n                                height=\"100%\"\n                                src={YOUTUBE_URL+key}\n                                frameBorder=\"0\"\n                                allowFullScreen\n                                allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                            />\n                        </Modal>)}\n                        </li>)\n                )}\n            </ul>)}\n          </>\n          }\n\n      {status === Status.REJECTED && <h1>{error.message}</h1>}\n    </>\n  );\n}\n\nTrailer.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nexport default Trailer;"],"sourceRoot":""}