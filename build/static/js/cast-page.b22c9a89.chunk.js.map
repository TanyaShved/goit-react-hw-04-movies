{"version":3,"sources":["components/CastItem/CastItem.module.css","components/CastList/CastList.module.css","components/CastItem/CastItem.jsx","components/CastList/CastList.jsx","components/Cast/Cast.jsx"],"names":["module","exports","CastItem","name","foto","className","s","item","image","src","alt","CastList","casts","list","map","id","profile_path","Status","Cast","useState","setCasts","error","setError","status","setStatus","useEffect","api","fetchCast","then","castMovie","cast","length","Promise","reject","Error","catch","Spinner","message"],"mappings":"0HACAA,EAAOC,QAAU,CAAC,KAAO,uBAAuB,KAAO,uBAAuB,MAAQ,0B,mBCAtFD,EAAOC,QAAU,CAAC,KAAO,yB,kFCwBVC,EAtBE,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACxB,OACE,sBAAKC,UAAWC,IAAEC,KAAlB,UACE,oBAAIF,UAAWC,IAAEH,KAAjB,SAAwBA,IACxB,qBACEE,UAAWC,IAAEE,MACbC,IACEL,EAAI,wDACiDA,GACjD,gEAENM,IAAI,c,iBCMGC,EAhBE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAClB,OACE,oBAAIP,UAAWC,IAAEO,KAAjB,SACGD,EAAME,KAAI,gBAAGC,EAAH,EAAGA,GAAIZ,EAAP,EAAOA,KAAMa,EAAb,EAAaA,aAAb,OACT,6BACE,cAAC,EAAD,CAAUb,KAAMA,EAAMC,KAAMY,KADrBD,S,gBCFXE,EACE,OADFA,EAEK,UAFLA,EAGM,WAHNA,EAIM,WA0CGC,UAvCF,SAAC,GAAY,IAAVH,EAAS,EAATA,GAAS,EACGI,mBAAS,IADZ,mBAChBP,EADgB,KACTQ,EADS,OAEGD,mBAAS,MAFZ,mBAEhBE,EAFgB,KAETC,EAFS,OAGKH,mBAASF,GAHd,mBAGhBM,EAHgB,KAGRC,EAHQ,KAwBvB,OAnBAC,qBAAU,WACRD,EAAUP,GAEVS,IACGC,UAAUZ,GACVa,MAAK,SAAAC,GACJ,OAA8B,IAA1BA,EAAUC,KAAKC,QACjBX,EAASS,EAAUC,WACnBN,EAAUP,IAGLe,QAAQC,OAAO,IAAIC,MAAJ,oCAEvBC,OAAM,SAAAd,GACLC,EAASD,GACTG,EAAUP,QAEb,CAACF,IAGF,qCACGQ,IAAWN,GAAkB,cAACmB,EAAA,EAAD,IAE7Bb,IAAWN,GAAmB,cAAC,EAAD,CAAUL,MAAOA,IAE/CW,IAAWN,GAAmB,6BAAKI,EAAMgB","file":"static/js/cast-page.b22c9a89.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CastItem_item__3_iqn\",\"name\":\"CastItem_name__3o27Q\",\"image\":\"CastItem_image__28FCQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"CastList_list__3w4-r\"};","import PropTypes from 'prop-types';\nimport s from './CastItem.module.css';\n\nconst CastItem = ({ name, foto }) => {\n  return (\n    <div className={s.item}>\n      <h2 className={s.name}>{name}</h2>\n      <img\n        className={s.image}\n        src={\n          foto\n            ? `http://image.tmdb.org/t/p/w300_and_h450_bestv2${foto}`\n            : 'https://www.ruprom.ru/templates/images/newdesign/noimage2.png'\n        }\n        alt=\"actor\"\n      />\n    </div>\n  );\n};\n\nCastItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  foto: PropTypes.string,\n};\n\nexport default CastItem;\n","import PropTypes from 'prop-types';\nimport CastItem from '../CastItem/CastItem';\nimport s from './CastList.module.css';\n\nconst CastList = ({ casts }) => {\n  return (\n    <ul className={s.list}>\n      {casts.map(({ id, name, profile_path }) => (\n        <li key={id}>\n          <CastItem name={name} foto={profile_path} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nCastList.propTypes = {\n  casts: PropTypes.array.isRequired,\n};\n\nexport default CastList;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport CastList from '../CastList/CastList';\nimport Spinner from '../Spinner/Spinner';\nimport api from '../../services/movies-api';\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nconst Cast = ({ id }) => {\n  const [casts, setCasts] = useState([]);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState(Status.IDLE);\n\n  useEffect(() => {\n    setStatus(Status.PENDING);\n\n    api\n      .fetchCast(id)\n      .then(castMovie => {\n        if (castMovie.cast.length !== 0) {\n          setCasts(castMovie.cast);\n          setStatus(Status.RESOLVED);\n          return;\n        }\n        return Promise.reject(new Error(`Sorry, Something came wrong!`));\n      })\n      .catch(error => {\n        setError(error);\n        setStatus(Status.REJECTED);\n      });\n  }, [id]);\n\n  return (\n    <>\n      {status === Status.PENDING && <Spinner />}\n\n      {status === Status.RESOLVED && <CastList casts={casts} />}\n\n      {status === Status.REJECTED && <h1>{error.message}</h1>}\n    </>\n  );\n};\n\nCast.propTypes = {\n  id: PropTypes.number.isRequired,\n};\n\nexport default Cast;\n"],"sourceRoot":""}